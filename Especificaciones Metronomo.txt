BeatDuino 280717
================

Metronomo con memorias programables para guardar un repetorio de tempos.

Seleccion de compases distintos?

ALta usabilidad tanto para insertar/mover/copiar tiempos en el repetorio, como guardar "sets" de repertorios, como para los cambios 
de cancion en directo.

Posibilidad de guardar titulos de canciones con tiempos y hacer la lista mas visual (por canciones)

Salida amplificada de auriculares con volumen.

Sonido del metronomo? o bien salida interna beeps del chip o bien reproducir un .wav deseado (que se encargue otro chip?)

Salida midi para enviar el tempo??

Interfaz comoda. Ver necesidades pantalla (poner una OLED to chula por probar o es demasiado? Rueda de edicion para incrementar los tiempos rapidamente?

Entrada para cambiar de memoria?

Puerto serie para programar. ¿Posibilidad de enviar/recibir repertorios?

INFO TECNICA
=============

Parte metronomo
---------------
Se trata de dar un pulso de tick de una duracion corta (10ms) con un tiempo de espera entre ticks que definen el tiempo.
1 bpm es un tiempo cada minuto, que son 60000 ms. COn lo que para obtener el delay en ms de un tempo es (60000/bpm)

Evidentemente, no haremos la pausa con un delay() ya que,el tiempo de ejecucion de las instrucciones intermedias puede afectar el tiempo del delay y ademas, nos bloquearía la ejecucion del programa.
Para ello, nos guardamos el valor de millis() y segun su variacion realizamos tareas y reseteamos millis a valor actual.

Esto tampoco es buena opcion porque puede durar mas el ciclo del programa que el tiempo de tick, para ello hay que usar interrupciones, pero, como veremos mas adelante, hay algunas consideraciones debido al midi clock.

Parte Audio
------------
Tenemos 2 opciones: generar tono via Arduino (tone()).. Habria que ver que tal se oye y el tipo de timbre que tiene.
					reproducir un archivo de audio WAV. ¿Es mucho proceso? ¿usamos un IC dedicado?
					
Salida audio line: salida estándar son +/-0,316V o +/- 1V (consumer-pro). Si generamos una onda de tono cuadrado (funcion tone) por un pin,como oscila entre 5V, tenemos que poner un divisor resistivo. Poniendo 1K y 10K, la dejamos en +/-0,5V. Poniendo 15K y 10K la dejamos en +/- 1V.

Diferencias salida auriculares/linea:
La señal de linea es muy pequeña y, la entrada de línea es de alta impedancia (orden de los 50ks). Un auricular tiene una baja impedancia (30ohms mas o menos) con lo que, si tratamos de alimentar un auricular con la salida directa de arduino, podemos cargarnos el pin porque la corriente maxima por pin de un atMega es de 40mA. Con una tension de 5V y una resistencia de 32ohms, nos da 156mA!!! con lo que seria excesivo. Tenemos que poner una resistencia limitadora (160 Ohm por ejemplo) para evitar dañar el pin.

https://forum.arduino.cc/index.php?topic=439305.0

Como se ha comentado, la salida de linea hay que bajarla con un divisor resistivo, pero además, nos interesará poner un filtro RC para suavizar la señal cuadrada y hacerla mas sinusoide, y un condensador para centrar la señal +-/1V en el 0. EL filtro es relevante en salidas de audio complejas que pueden presentar distorsion por haber sido generadas digitalmente. La funcion tone() de arduino, como genera un beep de onda cuadrada, no es muy necesario filtrarla y hacerla sinusoide porque ya suena bien.
Si la filtramos, lo que si que no sera muy necesario es el doble filtrado. Apenas se nota diferencia con la segunda pareja de R+C. (por lo menos con origen de onda cuadrada, a lo mejor ondas complejas si que es mejor)
AL igual, el acoplamiento con condensador para centrar, es mas relevante cuando amplificamos para alimentar un altavoz directamente. A pequeños voltajes no se aprecia el descentrado ni tiene relevancia.

(http://forum.arduino.cc/index.php?topic=286907.0).

Para el cálculo del filtro RC se usa la formula frecuencia = 1/(2*pi*R*C). La resistencia queremos poner la minima que limite la corriente de 40mA por seguridad y que no afecte a los divisores resistivos de luego, con lo que la ponemos de 160). La frecuencia de corte que queremos , creo que es la mitad de la maxima que vamos a suministrar, que, mirando el archivo .h de tones, son 4Khz, con lo que calculamos un C de 500nF (0,5uF -> comercial 0,47uF).
He realizado pruebas y no he notado diferencia entre poner condensador electrolitico o ceramico.
¿Si la salida es para auriculares, creo que hay que amplificarla también. (o poner un buffer como el enlace anterior)? Creo que no es necesario... O quizas, al tener la carga de 32ohms conectada, se genera una caida de tension que hace que se pierda volumen y por eso se necesita el amplificador/buffer....

Si queremos generar audio con datos en array de WAV, tenemos que usar una salida PMW, pero requiere configurar timers e interrupciones
para leer y reproducir el buffer. Además, tendremos que poner a la salida de ese pin, un filtro low pass para que suavice la señal, y
un filtro DC para centrar la señal para que oscile entre el 0V. (http://www.instructables.com/id/Arduino-Audio-Output/)

http://www.uchobby.com/index.php/2007/11/14/arduino-sound-part-2-hello-world/

http://www.instructables.com/id/Arduino-Audio-Output/
http://www.instructables.com/id/Simple-Wav-Player-Using-Arduino/

Tras realizar pruebas, existe una libreria PCM para reproducir wavs de 8bits a 8Khz. El problema es que usa los timers1 y 2 de Arduino, dejandote sin timers libres. Una idea es desactivar el timer0 de arduino y usarlo para nuestros propositos, otra es activar el compare match del timer0 (las funciones arduino del timer0 van con el overflow, con lo que el compareMatch está libre. 

Desactivar Timer0 y usarlo
--------------------------
EL problema de redeclarar el Timer0, es que arduino ya lo usa para las funciones delay(),milis() y micros() y, sólo por añadir el include <arduino.h> y ejecutar el setup() y loop() (que se añade al sketch automaticamente desde el IDE o desde Proteus), ya te lo activa.
Para evitar las inicializaciones de arduino en un sketch, esto es, convertirlo en c puro, tenemos que usar esta estructura de código:

#include <arduino.h>
int main(void){
	//funciones setup
	...
	//seccion loop
	while(1){
		..
	}
}

De esta manera, nos saltamos la funcion init() de arduino que se ejecuta en el setup(). EL include de arduino.h sólo hay que ponerlo si lo vamos a compilar nosotros, ya que lso IDEs te lo añaden.
Una vez ya tenemos el timer0 libre, lo podemos declarar en la zona setup de esta manera:
	
	noInterrupts(); // disable all interrupts
	TCCR0A 	= 0;
	TCCR0B	= 0;
	TCNT0 	= 0;   	//valor actual
	TCCR0B 	= 2;	//8 preescaler  (tiempo interrupcion: (1/F_CPU)*256*preescaler*1000(ms)
	TIMSK0 |= (1 << TOIE0);   // enable timer overflow interrupt
	interrupts();             // enable all interrupts  

Para saber el tiempo, el preescaler se multiplica por 256 porque la resolucion del timer0 es de 256. EL timer1 sería 16384 (16bit)

Solo nos queda declarar la interrupcion de overflow del timer0:
	ISR(TIMER0_OVF_vect) {
		...		
	}

Como hemos desactivado el timer0 de arduino, no funcionan los delay(),milis() y micros(). Para hacerlas funcionar y que las puedas usar las demas funciones, tenemos que redeclararlas:
	volatile static unsigned long timer0Counter		= 0;
	volatile static unsigned long timer0DelayTime 	= 0;

	//sobreescribimos funcion micros
	unsigned long micros()
	{
		return timer0Counter;
	}
	//sobreescribimos funcion delay
	void delay(unsigned long ms)
	{
		timer0DelayTime = 0;
		while (timer0DelayTime < (ms*1000)) 
			{yield();}	
	}
	
	ISR(TIMER0_OVF_vect) {
		timer0Counter+=128;	
		timer0DelayTime+=128;
	}
	
Utilizar el compareMatch del timer0
-----------------------------------
Los temporizadores tienen varios canales. El overflow que se ejecuta en los ciclos de interrupcion configurados y 2 canales de compareMatch A y B para dar la interrupcion cuando se alcanza un valor determinado. Estos canales están libres en el timer0 con lo que podemos utilizarlo y asi no tenemos que modificar la estructura del sketch , ni reeimplementar los delays. Asi se utiliza:

	unsigned char  oldSREG = SREG; 				// save StatusREGister (interrupts status)

	cli();										// stop interrupts

	TCCR0A &= ~(_BV(WGM01) | _BV(WGM00));       // set normal mode to allow update of OCR0x at any moment (disabling PMW pins 5 y 6)
	
	// Enable/disable the Output Compare Match interrupt

    TIMSK0 = (TIMSK0 & ~_BV(OCIE0A)) | _BV(OCIE0A);

    TIFR0 |= _BV(OCR0A);     // make sure the intr flag starts cleared

	SREG = oldSREG;								//restore interrupts status

	//We can't takeover timer0 and implement our delay/timming
	// functions, so we use the compare match interrupt and setup
	// OCR0A to cause an intr in multiples of 4us. Arduino libs
	// configure timer0 such that each TCNT0 count corresponds to
	// 1024us (timer 0 prescaler is set to 64 and Timer0 has 256 resolution
	// -> (1/16MHz)*64*256 => 1024us).
	ISR(TIMER0_COMPA_vect)
	{
		OCR0A = TCNT0;      // causing an interrupt every 2 x 1024us = 2048us

	}

Realizando pruebas, se ha visto que el ATmega328 no suena muy bien reproduciendo wavs a 8khzs. Se ha encontrado informacion de utilizar Attiny85 para reproduccion PCM que da mejor calidad porque, el timer que utiliza para la frecuencia portadora (la que no es el sample rate), puede alcanzar los 250khz debido a su modo especial de reloj PLL que alcanza 64mhz utilizando el reloj interno de 8mhz. 
Con lo que se va a usar el Attiny85 para la reproduccion, recibiendo de arduino la orden de reproducir.
Esta libreria usa 2 pines PWM. Lo que hace es enviar en la otra salida, la inversa de la primera. De esta manera, no es necesario condensador de acoplamiento AC ya que la señal ya está centrada en 0.
Por otro lado, el filtro paso bajo debe realizarse sobre la frecuencia portadora de 250khz ya que, esta contiene informacion de alta frecuencia que no lleva audio y que puede dañar los altavoces. Una regla para filtraje paso bajo de estas frecuencias es ajustar la frecuencia de corte a 1/10 de la frecuencia máxima. En este caso, 250khz/10 = 25khz es nuestra frecuencia de corte.
Utilizaremos una resistencia de 47R y un condensador ceramico de 100nF para filtras aprox 33Khz.
Como la resistencia de 47 no nos protege la corriente de 40mA por pin, ponemos en serie una de 100R para tener 147R de proteccion.
Un potenciometro de 10K entre las 2 salidas PMW nos da la señal para el altavoz.
Para la de linea, saldremos de las 2 resistencias en serie de 147 y conectaremos la salida entre una de las salidas PMW y GND. En la salida positiva pondremos un condensador de 10uF de acoplamiento.

A fin de poder utilizar el Proteus para el código de ambos ICs, se va a programar el Attiny sin los cores de Arduino, con compilador WinAVR en C y sustituyendo las funciones Arduino de pines,etcc.. por macros #define.


Como los samples de clicks son pequeños, nos caben varios sonidos en el Attiny. Haria falta comunicar el atMega con el atTiny para decirle qué sonido reproducir y cúando. He mirado opciones. El attiny no implementa usart de serie, hay que usar librerias, al igual que el i2c, y al final, la comunicacion es muy simple. Utilizamos 3 salidas digitales en forma de bits codificados que nos darán esta informacion:

0	0	0	no sound	
0	0	1	spare	
0	1	0	tone1 	
0	1	1	tone1 beat 1	
1	0	0	tone2 	
1	0	1	tone2 beat 1	
1	1	0	tone3 	
1	1	4	tone3 beat 1

Ruidos:
--------
La comunicacion i2c me genera mucho ruido de fondo , que cambia conforme se redibuja la pantalla. Para evitar estos ruidos, se utilizan condensadores de desacoplamiento.
Siempre que hay ICs, sobretodo que son microcontroladores, es recomendable poner un condensador electrolítico entre su aliemntacion positiva y masa porque, debido al procesamiento de cambio de entradas salidas y comunicacion serie, el uC hace variar su caída de tension durante tiempos muy rapidos, generando oscilacion y provocando ruidos en la masa. Con el condensador en la alimentación, filtramos esas variaciones rapidas. Podemos poner tantos condensadores como ICs tengamos en sus alimentaciones.
Haciendo pruebas en real, cuanto mas grande es el condensador (mas capacidad), mas filtra. Con uno de 1000uF me ha ido bien.

Ha pesar del filtro en la alimentacion, he tenido ruido de fondo en la masa probando en protoboard. Al mover el cable y tumbarlo y hacer que mas superficie toque el pin, se eliminaba. Hay que tener una buena zona de masa para evita esto. Es importante en el PCB, hacer un buen cooper de masa que ocupe mucha superficie.
Al pasar la masa del encoder y de la pantalla al carril de abajo del protoboard y la masa de todo lo demas cojerlo a la otra salida gnd de arduino, me desaparece el ruido de fondo totalmente sin usar condensador. Parece que cuanto
mas alejado esté de la fuente de ruido, mejor.
Al utilizar el Attiny para los sonidos, que esté alimentado del mismo sitio que la pantalla i2c grande, me vuelven los ruidos. Si pongo el condesador de 1000uf entre el negativo y positivo general, se reduce un poco el ruido, pero si lo pongo entre las patillas de alimentacion del Attiny, desaparece por completo!

Pantalla
-------
(http://www.prometec.net/oled/)

Podemos optar por un LCD, un TFT o OLED. Ya conocemos las limitaciones del LCD, y sobre las otras dos, parece mejor opcion la OLED, por precio y carga de código. EL TFT sera de colores y OLED de un solo color. Nos sobra...

El de mayor uso son OLED con chip SDD1306 128x64 que puede ir por I2C o SPI. El SPI es mas rapido, pero usa mas pines. I2C(5) SPI (7)
La libreria de Adafruit gasta 1K de Ram (32k totales arduino uno)

EL Oled de 0,96 y el oled de 2,42 que he comprado, tienen direcciones i2c diferentes.

Conversor imagenes: http://javl.github.io/image2cpp/

Para conectar la pantalla con pines SPI a I2C, debemos soldar los jumpers correspondientes y la equivalencia de pines es:

D0 - SCL
D1 - SDA
RES - Señal de reset LOW
DC - +
CS - no tiene relevancia. No hace falta conectarlo

EN cuanto a librerias para controlarlo, la de Adafruit permite imagenes, pero trabaja volcando todo el buffer (todos los pixeles) de la pantalla a la vez. Esto me da un retardo de ciclo de, en ocasiones, 180ms, siendo un problema con la interrupcion del midi clock. Se queda colgado arduino por ese retardo de ciclo.
Se encuentra una librería sólo texto para el OLed que, ademas, en vez de utilizar la libreria Wire de Arduino para la comunicacion i2c, utilzia las funciones avri2c genericas que son mas rapidas.
Se modiifca la libreria para permitir poner texto de color inverso (para las selecciones de menu)
Con esta libreria, la señal de reset no se usa por programa y se cablea a +VCC

Interfaz física
---------------

Para la parte de introducir valores usaremos un encoder rotativo con pulsador. EL encoder genera un pulso por cada canal A y B desfasados 90 grados entre ellos segun el sentido de giro del encoder. EN un sentido, el pulso de A se da antes que el de B, y en el otro sentido, al contrario. Eso nos permite controlar que, si cuando se da el pulso de A, B ya ha cambiado, estamos en un sentido y si B es distinto, estamos en el otro sentido.
Es importante poner unos condensadores para filtrar los ruidos y rebotes de la conmutación mecánica.

El knob del encoder rotativo en forma de rueda se llama scrubber
Dudas:
	-CUando cambias de tema, se para el metronomo?
	-Hay que aceptar el cambio de metronomo con el botón?
	
Parte Midi
----------
Se va a usar salida midi para enviar la claqueta a cualquier dispositivo que lo necesite (como mi multiefectos :) ).
El tempo midi es un mensaje midi llamado midi clock que es enviar 0xF8. La particularidad de ese mensaje es que hay que enviarlo 24 veces por negra (quarter). Tengo que probar si es necesario hacerlo con una interrupcion de Timer o se puede hacer por codigo, aunque son muchas llamadas. Si se hace por interrupcion, quizas interesaría pasar todos los eventos de claqueta a TImer y que desde ahí envie el tono de audio, el parpadeo de led y el midi clock.

Consumos
--------
Pantalla LCD: 16mA (0,08W)

Nota:
-----
-El bornero de 3 polos es 8mm de alto.